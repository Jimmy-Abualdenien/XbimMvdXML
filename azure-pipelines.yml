# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  branches:
    include:
    - master
    - develop
  paths:
    exclude:
    - README.md
    - CHANGELOG.md
    - CONTRIBUTING.md

pool:
  vmImage: 'windows-2019'

variables:
  buildConfiguration: 'Release'
  major: 5
  minor: 1
  # creates a counter called versioncounter and seeds it at 100 and then assigns the value to a variable named buildNo.
  buildNo: $[counter('versioncounter', 100)]
  

name: $(BuildDefinitionName)_$(SourceBranchName)_$(major).$(minor).$(buildNo)

steps:
# Windows script setting up  $(packageversion) of the nuget package based on branch
# Master branch
- script: |
    echo ##vso[task.setvariable variable=packageversion]$(major).$(minor).$(buildNo)
  displayName: 'Setting Master Nuget PackageVersion'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
- script: | 
    echo ##vso[task.setvariable variable=packageversion]$(major).$(minor).$(buildNo)-$(Build.SourceBranchName)
  displayName: 'Setting Prerelease Nuget PackageVersion'
  condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')


# Windows script setting up $(fileversion) used to stamp AssemblyFileVersions. 
# By convention we use 'Major.Minor.BuildNo.0' on Master and 'Major.Minor.0.BuildNo' on other branches
# Master branch
- script: | 
    echo ##vso[task.setvariable variable=fileversion]$(major).$(minor).$(buildNo).0
  displayName: 'Setting FileVersion'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
# Any other branch
- script: | 
    echo ##vso[task.setvariable variable=fileversion]$(major).$(minor).0.$(buildNo)
  displayName: 'Setting Prerelease FileVersion'
  condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')

- task: NuGetToolInstaller@0
  displayName: 'Install Nuget'
  inputs:
    versionSpec: '5.4.0'  # the License element was not found in 2.164.0

# Version .NET Core project files
# Description - Applies a version to a .NET Core assembly via the .csproj files based on the build number. 
# Based on https://github.com/rfennell/AzurePipelines/wiki/Version-Assemblies-and-Packages-Tasks-YAML#versiondotnetcoreassembliestask
- task: VersionDotNetCoreAssemblies@2
  displayName: 'Versioning netcore projects $(fileversion)'
  inputs: 
    # Required arguments
    Path: $(Build.SourcesDirectory)
    VersionNumber: $(fileversion)
    VersionRegex: \d+\.\d+\.\d+\.\d+
    FilenamePattern: .csproj
    Field: FileVersion
    OutputVersion: OutputedVersion

# Unit tests
#- task: DotNetCoreCLI@2
#  displayName: 'dotnet test $(buildConfiguration)'
#  inputs:
#    command: test
#    projects: '**/*Tests/*.csproj'
#    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'


# xBIM mvdXML
- script: dotnet pack Xbim.MvdXml/Xbim.MvdXml.csproj -c Release -o $(Build.BinariesDirectory) /p:PackageVersion=$(packageversion)
  displayName: 'Xbim.MvdXml - packing'

  
# Copy artifacts and Publish
- task: CopyFiles@2
  displayName: 'Copy to artifacts'
  inputs:
    sourceFolder: '$(Build.BinariesDirectory)'
    contents: '**\*.nupkg' 
    targetFolder: '$(build.artifactstagingdirectory)'
    cleanTargetFolder: true
    
# Publish to master or develop MyGet feed based on the source branch
- task: NuGetCommand@2
  displayName: 'Publish to MyGet Master'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: 'MyGetMaster'
    versioningScheme: byEnvVar
    versionEnvVar: packageversion

- task: NuGetCommand@2
  displayName: 'Publish to MyGet Develop'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: 'MyGetDev'
    versioningScheme: byEnvVar
    versionEnvVar: packageversion

##  ___ _           _      
## | _ \ |_  _ __ _(_)_ _  
## |  _/ | || / _` | | ' \ 
## |_| |_|\_,_\__, |_|_||_|
##            |___/        
##
## Plugin preparation and publishing

# nuget restore sln
- task: NuGetCommand@2
  displayName: 'Plugin - NuGet restore solution'
  inputs:
    restoreSolution: '*.sln'
    feedsToUse: config
    nugetConfigPath: 'nuget.config'

# build
- task: VSBuild@1
  displayName: 'Plugin - Build solution'
  inputs:
    solution: '*.sln' # the plugin project alone does not build.
    msbuildArgs: '/t:build'
    platform: 'Any CPU'
    configuration: '$(BuildConfiguration)'

# Pack XplorerPlugin.Bcf with nuget and nuspec. 
- task: NuGetCommand@2
  displayName: 'Plugin - NuGet pack'
  inputs:
    command: pack
    packagesToPack: 'XbimPlugin.MvdXML.plugin.nuspec'
    configuration: $(BuildConfiguration)
    versioningScheme: byEnvVar
    versionEnvVar: packageversion
    
# Publish plugin to custom myget service connection.
- task: NuGetCommand@2
  displayName: 'Plugin - NuGet publish'
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: 'MyGetPlugins'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/XbimPlugin.*.nupkg;' # Required when command == Push
    versioningScheme: byEnvVar
    versionEnvVar: version

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts'
    